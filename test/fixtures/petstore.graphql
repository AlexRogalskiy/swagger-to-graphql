type addPet {
  """default field"""
  empty: String
}

type createUser {
  """default field"""
  empty: String
}

type createUsersWithArrayInput {
  """default field"""
  empty: String
}

type createUsersWithListInput {
  """default field"""
  empty: String
}

type deleteOrder {
  """default field"""
  empty: String
}

type deletePet {
  """default field"""
  empty: String
}

type deleteUser {
  """default field"""
  empty: String
}

type findPetsByStatus_items {
  id: String
  category: findPetsByStatus_items_category
  name: String!
  photoUrls: [String]!
  tags: [findPetsByStatus_items_tags_items]

  """pet status in the store"""
  status: String
}

type findPetsByStatus_items_category {
  id: String
  name: String
}

input findPetsByStatus_items_categoryInput {
  id: String
  name: String
}

type findPetsByStatus_items_tags_items {
  id: String
  name: String
}

input findPetsByStatus_items_tags_itemsInput {
  id: String
  name: String
}

input findPetsByStatus_itemsInput {
  id: String
  category: findPetsByStatus_items_categoryInput
  name: String!
  photoUrls: [String]!
  tags: [findPetsByStatus_items_tags_itemsInput]

  """pet status in the store"""
  status: String
}

type getInventory {
  """default field"""
  empty: String
}

type getOrderById {
  id: String
  petId: String
  quantity: Int
  shipDate: String

  """Order Status"""
  status: String
  complete: Boolean
}

input getOrderByIdInput {
  id: String
  petId: String
  quantity: Int
  shipDate: String

  """Order Status"""
  status: String
  complete: Boolean
}

type getUserByName {
  id: String
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String

  """User Status"""
  userStatus: Int
}

input getUserByNameInput {
  id: String
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String

  """User Status"""
  userStatus: Int
}

type loginUser {
  """default field"""
  empty: String
}

type logoutUser {
  """default field"""
  empty: String
}

type Mutation {
  addPet(body: findPetsByStatus_itemsInput!): addPet
  updatePet(body: findPetsByStatus_itemsInput!): updatePet
  updatePetWithForm(petId: String!, name: String, status: String): updatePetWithForm
  deletePet(api_key: String, petId: String!): deletePet
  placeOrder(body: getOrderByIdInput): getOrderById

  """
  For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
  """
  deleteOrder(orderId: String!): deleteOrder

  """This can only be done by the logged in user."""
  createUser(body: getUserByNameInput): createUser
  createUsersWithArrayInput(body: [getUserByNameInput]): createUsersWithArrayInput
  createUsersWithListInput(body: [getUserByNameInput]): createUsersWithListInput

  """This can only be done by the logged in user."""
  updateUser(username: String!, body: getUserByNameInput): updateUser

  """This can only be done by the logged in user."""
  deleteUser(username: String!): deleteUser
}

type Query {
  """Multiple status values can be provided with comma separated strings"""
  findPetsByStatus(status: [String]!): [findPetsByStatus_items]

  """
  Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  """
  findPetsByTags(tags: [String]!): [findPetsByStatus_items]

  """Returns a single pet"""
  getPetById(petId: String!): findPetsByStatus_items

  """Returns a map of status codes to quantities"""
  getInventory: getInventory

  """
  For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
  """
  getOrderById(orderId: String!): getOrderById
  loginUser(username: String!, password: String!): loginUser
  logoutUser: logoutUser
  getUserByName(username: String!): getUserByName
}

type updatePet {
  """default field"""
  empty: String
}

type updatePetWithForm {
  """default field"""
  empty: String
}

type updateUser {
  """default field"""
  empty: String
}
